/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,31],$V2=[1,38],$V3=[1,32],$V4=[1,28],$V5=[1,24],$V6=[1,23],$V7=[1,29],$V8=[1,30],$V9=[1,27],$Va=[1,26],$Vb=[1,20],$Vc=[1,34],$Vd=[1,21],$Ve=[1,22],$Vf=[1,25],$Vg=[1,35],$Vh=[1,37],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[2,5,23,24,26,28,31,38,41,42,46,47,48,51,52,53,54,55,58,73,74,75,76,77,78,79,80],$Vq=[43,58,59,60,61,62,63,65,66,67,68,69,70,71,72],$Vr=[2,111],$Vs=[1,67],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,80],$Vx=[1,79],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[13,25,30,33,43,58,59,60,61,62,63,65,66,67,68,69,70,71,72],$VL=[2,5,23,24,26,28,31,38,41,42,46,47,48,50,51,52,53,54,55,58,73,74,75,76,77,78,79,80],$VM=[2,83],$VN=[2,85],$VO=[2,84],$VP=[2,86],$VQ=[1,128],$VR=[1,127],$VS=[1,129],$VT=[13,25,30,33,43,58,59,65,66,67,68,69,70,71,72],$VU=[2,5,13,23,24,26,28,31,38,41,42,46,47,48,51,52,53,54,55,58,73,74,75,76,77,78,79,80],$VV=[25,30],$VW=[13,33],$VX=[13,25,30,33,43,58,59,60,61,65,66,67,68,69,70,71,72],$VY=[13,25,30,33,43,65,66,67,68,69,70,71,72],$VZ=[13,25,30,33,43,69,70,71,72],$V_=[1,192],$V$=[1,193],$V01=[1,194],$V11=[2,5,13,23,24,26,28,31,33,38,41,42,46,47,48,51,52,53,54,55,58,73,74,75,76,77,78,79,80],$V21=[25,30,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"Statement":9,"FOR":10,"FUNCIONN":11,"PrintSt":12,";":13,"Declaration1":14,"Declaration2":15,"Asignacion":16,"CALLFUNCION":17,"INCREMENTO":18,"GRAFICAR":19,"RETORNO":20,"OperadorTernario":21,"DOWHILE":22,"t_graficar_ts":23,"(":24,")":25,"t_return":26,"Expr":27,"ID":28,"ListaExpr":29,",":30,"t_function":31,"Parametros":32,":":33,"TIPOS":34,"t_boolean":35,"t_string":36,"t_number":37,"t_for":38,"for1":39,"for2":40,"++":41,"--":42,"?":43,"ParaOperadorTernario":44,"=":45,"t_let":46,"const":47,"IF":48,"ElseSt":49,"ELSE":50,"t_do":51,"WHILE":52,"{":53,"}":54,"CONSOLE":55,".":56,"LOG":57,"-":58,"+":59,"*":60,"/":61,"%":62,"**":63,"F":64,"<":65,"<=":66,">":67,">=":68,"==":69,"!=":70,"&&":71,"||":72,"!":73,"DECIMAL":74,"NUMBER":75,"STRING":76,"STRINGG":77,"STRINGGG":78,"true":79,"false":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",23:"t_graficar_ts",24:"(",25:")",26:"t_return",28:"ID",30:",",31:"t_function",33:":",35:"t_boolean",36:"t_string",37:"t_number",38:"t_for",41:"++",42:"--",43:"?",45:"=",46:"t_let",47:"const",48:"IF",50:"ELSE",51:"t_do",52:"WHILE",53:"{",54:"}",55:"CONSOLE",56:".",57:"LOG",58:"-",59:"+",60:"*",61:"/",62:"%",63:"**",65:"<",66:"<=",67:">",68:">=",69:"==",70:"!=",71:"&&",72:"||",73:"!",74:"DECIMAL",75:"NUMBER",76:"STRING",77:"STRINGG",78:"STRINGGG",79:"true",80:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[19,3],[20,1],[20,2],[17,3],[17,4],[29,3],[29,1],[11,5],[11,6],[11,7],[11,8],[32,5],[32,3],[34,1],[34,1],[34,1],[10,9],[39,1],[39,1],[39,1],[40,1],[40,2],[40,2],[40,2],[40,2],[21,5],[44,1],[44,1],[44,2],[44,2],[44,2],[44,2],[16,3],[18,3],[18,3],[18,3],[18,3],[15,4],[15,6],[15,6],[15,6],[15,4],[15,4],[15,4],[15,2],[14,4],[14,6],[14,6],[14,6],[7,6],[49,2],[49,2],[49,0],[22,6],[8,5],[9,3],[9,2],[12,6],[12,5],[27,2],[27,2],[27,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[64,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        exports.Lista_errores= Lista_errores;
        exports.pila_funciones= pila_funciones;
        exports.consola= consola;
        exports.ast= ast;
        exports.graficarTS= graficarTS;
        return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 15: case 16: case 18:
  this.$ = $$[$0];  
break;
case 9: case 11: case 12: case 13: case 14: case 17: case 19: case 20: case 21:
  this.$ = $$[$0-1];  
break;
case 22:
  console.log("error sintactico en linea " + (yylineno+1) );
break;
case 23:
this.$= new GraficarTablaSimbolos(_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
 this.$= new Ret(null,_$[$0].first_line, _$[$0].first_column);
break;
case 25:
 this.$= new Ret($$[$0]  ,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 26:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 27:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 28:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 29:

        this.$ = [$$[$0]];
    
break;
case 30:

       
        this.$ = new InsFuncion($$[$0-3], $$[$0], [], "",_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 31:

        this.$ = new InsFuncion($$[$0-4], $$[$0], $$[$0-2], "",_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 32:

        this.$ = new InsFuncion($$[$0-5], $$[$0], [], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 33:

        this.$ = new InsFuncion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1] ,_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 34:

        $$[$0-4].push($$[$0-2]+","+$$[$0]);
        this.$ = $$[$0-4];
    
break;
case 35:

        this.$ = [$$[$0-2]+","+$$[$0]];
    
break;
case 36: case 37: case 38: case 40: case 41: case 42: case 43:
this.$=$$[$0];
break;
case 39:

            this.$=new InstFor($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 44: case 47: case 51: case 54:
 this.$= new Incre($$[$0-1],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 45: case 46: case 52: case 53:
 this.$= new Incre($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:

            this.$=new OperadorTernario($$[$0-4], $$[$0-2], $$[$0] ,_$[$0-3].first_line, _$[$0-3].first_column );
    
break;
case 49: case 50:
 this.$=$$[$0]; 
break;
case 55:
 
          this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 56: case 59:
 this.$= new Incre($$[$0-2],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 57: case 58:
 this.$= new Incre($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 60:

        this.$ = new Let($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 61: case 62: case 63:

        this.$ = new Let($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 64: case 65: case 66:

        this.$ = new Let($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 67:

        this.$ = new Let($$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 68:

        this.$ = new Declaration($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 69: case 70: case 71:

        this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 72:

      this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 73: case 74:

        this.$ = $$[$0];
    
break;
case 75:

        this.$ = null;
    
break;
case 76:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 77:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);    
break;
case 78:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 79:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 80:

        this.$ = new Print($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 81:

        this.$ = new Print(null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 82:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,  _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 83:
 this.$ = new Arithmetic($$[$0-1], $$[$0-1], ArithmeticOption.INCREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 84:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.INCREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 85:
 this.$ = new Arithmetic($$[$0-1], $$[$0-1], ArithmeticOption.DECREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 86:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.DECREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS,  "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 90:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV,   "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 91:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO,"", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 92:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT,   "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 93:
  this.$ = $$[$0]; 
break;
case 94:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.IGUAL ,          _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.DIFERENCIACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 100:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Relational($$[$0], $$[$0],RelationalOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
  this.$ = $$[$0-1]; 
break;
case 104:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 105:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 106:
  this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 107:
  this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 108:
  this.$ = new Literal($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 109: case 110:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 3); 
break;
case 111:
  this.$ = new Access($$[$0],                    _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,26:$V3,27:33,28:$V4,31:$V5,38:$V6,41:$V7,42:$V8,46:$V9,47:$Va,48:$Vb,51:$Vc,52:$Vd,53:$Ve,55:$Vf,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{1:[3]},{2:$V0,5:[1,46],6:47,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,26:$V3,27:33,28:$V4,31:$V5,38:$V6,41:$V7,42:$V8,46:$V9,47:$Va,48:$Vb,51:$Vc,52:$Vd,53:$Ve,55:$Vf,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,10],{13:[1,48]}),{13:[1,49]},{13:[1,50]},{13:[1,51]},o($Vp,[2,15],{13:[1,52]}),o($Vp,[2,16]),o($Vp,[2,18],{13:[1,53]}),{13:[1,54]},{13:[1,55]},{13:[1,56]},{13:[1,57]},{24:[1,58]},{24:[1,59]},{2:$V0,4:60,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,26:$V3,27:33,28:$V4,31:$V5,38:$V6,41:$V7,42:$V8,46:$V9,47:$Va,48:$Vb,51:$Vc,52:$Vd,53:$Ve,54:[1,61],55:$Vf,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:[1,62]},{28:[1,63]},{56:[1,64]},{28:[1,65]},{28:[1,66]},o($Vq,$Vr,{24:[1,68],41:[1,69],42:[1,70],45:$Vs}),{28:[1,71]},{28:[1,72]},{24:[1,73]},{13:[2,24],24:$V2,27:74,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{43:[1,78],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{9:93,53:$Ve},{24:$V2,27:94,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($VK,[2,93]),{24:$V2,27:95,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:96,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($VK,[2,104]),o($VK,[2,105]),o($VK,[2,106]),o($VK,[2,107]),o($VK,[2,108]),o($VK,[2,109]),o($VK,[2,110]),{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,9]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,17]),o($Vp,[2,19]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),{24:$V2,27:97,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:98,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{2:$V0,6:47,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,26:$V3,27:33,28:$V4,31:$V5,38:$V6,41:$V7,42:$V8,46:$V9,47:$Va,48:$Vb,51:$Vc,52:$Vd,53:$Ve,54:[1,99],55:$Vf,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($VL,[2,79]),{14:101,15:102,16:103,28:[1,104],39:100,46:$V9,47:$Va},{24:[1,105]},{57:[1,106]},{33:[1,108],45:[1,107]},{13:[2,67],33:[1,110],45:[1,109]},{24:$V2,27:111,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,25:[1,112],27:114,28:$Vt,29:113,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($Vq,$VM,{13:[1,115]}),o($Vq,$VN,{13:[1,116]}),o($Vq,$VO,{13:[1,117]}),o($Vq,$VP,{13:[1,118]}),{25:[1,119]},{13:[2,25],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($VK,$Vr,{41:[1,120],42:[1,121]}),{28:[1,122]},{28:[1,123]},{12:125,16:126,28:$VQ,41:$VR,42:$VS,44:124,55:$Vf},{24:$V2,27:130,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:131,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:132,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:133,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:134,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:135,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:136,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:137,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:138,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:139,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:140,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:141,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:142,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:143,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{52:[1,144]},o($VT,[2,82],{60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VK,[2,102]),{25:[1,145],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{25:[1,146],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{25:[1,147],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($VL,[2,78]),{13:[1,148]},{13:[2,40]},{13:[2,41]},{13:[2,42]},{45:$Vs},{25:[1,149],28:[1,151],32:150},{24:[1,152]},{24:$V2,27:153,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{35:[1,154],36:[1,155],37:[1,156]},{24:$V2,27:157,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{35:[1,158],36:[1,159],37:[1,160]},o([13,25,33],[2,55],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($VU,[2,26]),{25:[1,161],30:[1,162]},o($VV,[2,29],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),o($Vp,[2,57]),o($Vp,[2,58]),o($Vp,[2,56]),o($Vp,[2,59]),o($VU,[2,23]),o($VK,$VM),o($VK,$VN),o($VK,$VO),o($VK,$VP),{33:[1,163]},o($VW,[2,49]),o($VW,[2,50]),{28:[1,164]},{41:[1,165],42:[1,166],45:$Vs},{28:[1,167]},o($VT,[2,87],{60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VT,[2,88],{60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VX,[2,89],{62:$VA,63:$VB}),o($VX,[2,90],{62:$VA,63:$VB}),o($VK,[2,91]),o($VK,[2,92]),o($VY,[2,94],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VY,[2,95],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VY,[2,96],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VY,[2,97],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),o($VZ,[2,98],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VZ,[2,99],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o([13,25,30,33,43,71,72],[2,100],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o([13,25,30,33,43,72],[2,101],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI}),{24:[1,168]},o($VK,[2,103]),{9:169,53:$Ve},{9:170,53:$Ve},{24:$V2,27:171,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{9:172,33:[1,173],53:$Ve},{25:[1,174],30:[1,175]},{33:[1,176]},{24:$V2,25:[1,178],27:177,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{13:[2,68],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{45:[1,179]},{45:[1,180]},{45:[1,181]},{13:[2,60],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,64],45:[1,182]},{13:[2,65],45:[1,183]},{13:[2,66],45:[1,184]},o($VU,[2,27]),{24:$V2,27:185,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{12:125,16:126,28:$VQ,41:$VR,42:$VS,44:186,55:$Vf},o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),{24:$V2,27:187,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($Vp,[2,75],{49:188,50:[1,189]}),o($Vp,[2,77]),{13:[1,190],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($Vp,[2,30]),{34:191,35:$V_,36:$V$,37:$V01},{9:195,33:[1,196],53:$Ve},{28:[1,197]},{34:198,35:$V_,36:$V$,37:$V01},{25:[1,199],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($V11,[2,81]),{24:$V2,27:200,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:201,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:202,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:203,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:204,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},{24:$V2,27:205,28:$Vt,41:$Vu,42:$Vv,58:$Vg,64:36,73:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo},o($VV,[2,28],{58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ}),{13:[2,48]},{25:[1,206],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},o($Vp,[2,72]),{7:208,9:207,48:$Vb,53:$Ve},{16:210,28:[1,212],40:209,41:[1,211],42:[1,213]},{9:214,53:$Ve},o($V21,[2,36]),o($V21,[2,37]),o($V21,[2,38]),o($Vp,[2,31]),{34:215,35:$V_,36:$V$,37:$V01},{33:[1,216]},o($VV,[2,35]),o($V11,[2,80]),{13:[2,69],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,70],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,71],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,61],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,62],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,63],58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ},{13:[2,76]},o($Vp,[2,73]),o($Vp,[2,74]),{25:[1,217]},{25:[2,43]},{28:[1,218]},{41:[1,219],42:[1,220],45:$Vs},{28:[1,221]},o($Vp,[2,32]),{9:222,53:$Ve},{34:223,35:$V_,36:$V$,37:$V01},{9:224,53:$Ve},{25:[2,44]},{25:[2,45]},{25:[2,46]},{25:[2,47]},o($Vp,[2,33]),o($VV,[2,34]),o($Vp,[2,39])],
defaultActions: {46:[2,1],101:[2,40],102:[2,41],103:[2,42],186:[2,48],206:[2,76],210:[2,43],218:[2,44],219:[2,45],220:[2,46],221:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Declaration} = require('../Instruction/Declaration');
    const {Let} = require('../Instruction/let');
    const {Asignacion} = require('../Instruction/Asignacion');
    const {OperadorTernario} = require('../Instruction/OperadorTernario');
    const {DoWhile} = require('../Instruction/Dowhile');
    const {InstFor} = require('../Instruction/InstFor');
    const {Incre} = require('../Instruction/Incre');
    const {InsFuncion} = require('../Instruction/InsFuncion');
    const {Call} = require('../Instruction/Call');
    const {Ret} =require('../Instruction/Ret');
    const {GraficarTablaSimbolos} = require('../Instruction/Gr');

    var Lista_errores=[];
    var pila_funciones=[];
    var tmp="";
    var consola="";
    var ast="";
    var graficarTS="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('string');/*console.log("+entre en el estado string");*/ tmp="";
break;
case 1: /*console.log("dentro del estado string: "+yy_.yytext);*/  tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 2: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 3: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 4: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 5: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 6: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 7:
                    //console.log("-saliendo del estado string->" +tmp);
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    return 76
                    
break;
case 8:/* skip whitespace */
break;
case 9:// comentario simple línea
break;
case 10:// comentario multiple líneas
break;
case 11:return 79
break;
case 12:return 80
break;
case 13:return 74
break;
case 14:return 75
break;
case 15:return 77
break;
case 16:return 78
break;
case 17:return 63
break;
case 18:return 41
break;
case 19:return 42
break;
case 20:return 59
break;
case 21:return 58
break;
case 22:return 60
break;
case 23:return 61
break;
case 24:return 62
break;
case 25:return 13
break;
case 26:return 33
break;
case 27:return 56
break;
case 28:return 43
break;
case 29:return 30
break;
case 30:return 66
break;
case 31:return 68
break;
case 32:return 65
break;
case 33:return 67
break;
case 34:return 69
break;
case 35:return 70
break;
case 36:return 72
break;
case 37:return 71
break;
case 38:return 73
break;
case 39:return 45
break;
case 40:return 24
break;
case 41:return 25 
break;
case 42:return 53
break;
case 43:return 54
break;
case 44:return 48
break;
case 45:return 50
break;
case 46:return 52
break;
case 47:return 47
break;
case 48:return 37
break;
case 49:return 36
break;
case 50:return 35
break;
case 51:return 46
break;
case 52:return 51
break;
case 53:return 38
break;
case 54:return 55
break;
case 55:return 57
break;
case 56:return 31
break;
case 57:return 26
break;
case 58:return 23
break;
case 59:return 28;
break;
case 60:return 5
break;
case 61:Lista_errores.push("<tr><td>lexico</td><td>No se reconoce el caracter "+yy_.yytext + '</td><td>' + (yy_.yylineno+1) +'</td><td>'+(yy_.yylloc.first_column+1)+'</td></tr>');	
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([\'][^']*[\']))/i,/^(?:([\`][^`]*[\`]))/i,/^(?:\*\*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:let\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"INITIAL":{"rules":[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}