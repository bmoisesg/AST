/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,25],$V2=[1,29],$V3=[1,32],$V4=[1,39],$V5=[1,33],$V6=[1,26],$V7=[1,24],$V8=[1,30],$V9=[1,31],$Va=[1,28],$Vb=[1,21],$Vc=[1,35],$Vd=[1,22],$Ve=[1,23],$Vf=[1,27],$Vg=[1,36],$Vh=[1,38],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[2,5,24,25,37,38,40,42,47,50,51,54,55,58,59,60,61,62,65,78,79,80,81,82,83,84,85],$Vq=[33,34,52,65,66,67,68,69,70,72,73,74,75,76,77],$Vr=[2,117],$Vs=[1,69],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,87],$Vx=[1,89],$Vy=[1,82],$Vz=[1,81],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,88],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[12,26,29,33,34,35,39,52,65,66,67,68,69,70,72,73,74,75,76,77],$VL=[2,5,24,25,37,38,40,42,47,50,51,54,55,57,58,59,60,61,62,65,78,79,80,81,82,83,84,85],$VM=[2,73],$VN=[1,109],$VO=[2,89],$VP=[2,91],$VQ=[2,90],$VR=[2,92],$VS=[1,131],$VT=[1,130],$VU=[1,132],$VV=[12,26,29,33,34,35,39,52,65,66,72,73,74,75,76,77],$VW=[2,5,12,24,25,37,38,40,42,47,50,51,54,55,58,59,60,61,62,65,78,79,80,81,82,83,84,85],$VX=[35,39],$VY=[12,26],$VZ=[12,26,29,33,34,35,39,52,65,66,67,68,72,73,74,75,76,77],$V_=[12,26,29,33,34,35,39,52,72,73,74,75,76,77],$V$=[12,26,29,35,39,52,74,75,76,77],$V01=[2,70],$V11=[2,42],$V21=[1,181],$V31=[2,71],$V41=[2,43],$V51=[1,182],$V61=[2,72],$V71=[2,44],$V81=[1,183],$V91=[1,205],$Va1=[1,206],$Vb1=[1,207],$Vc1=[2,5,12,24,25,26,37,38,40,42,47,50,51,54,55,58,59,60,61,62,65,78,79,80,81,82,83,84,85],$Vd1=[34,35,39,60],$Ve1=[1,247],$Vf1=[29,35];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"Statement":9,"FOR":10,"INSTARRAR":11,";":12,"FUNCIONN":13,"PrintSt":14,"Declaration1":15,"Declaration2":16,"Asignacion":17,"CALLFUNCION":18,"INCREMENTO":19,"GRAFICAR":20,"RETORNO":21,"OperadorTernario":22,"DOWHILE":23,"t_let":24,"ID":25,":":26,"TIPOS":27,"[":28,"]":29,"=":30,"ContenidoArray":31,"t_array":32,"<":33,">":34,",":35,"Expr":36,"t_graficar_ts":37,"(":38,")":39,"t_return":40,"ListaExpr":41,"t_function":42,"Parametros":43,"t_boolean":44,"t_string":45,"t_number":46,"t_for":47,"for1":48,"for2":49,"++":50,"--":51,"?":52,"ParaOperadorTernario":53,"const":54,"IF":55,"ElseSt":56,"ELSE":57,"t_do":58,"WHILE":59,"{":60,"}":61,"CONSOLE":62,".":63,"LOG":64,"-":65,"+":66,"*":67,"/":68,"%":69,"**":70,"F":71,"<=":72,">=":73,"==":74,"!=":75,"&&":76,"||":77,"!":78,"DECIMAL":79,"NUMBER":80,"STRING":81,"STRINGG":82,"STRINGGG":83,"true":84,"false":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:";",24:"t_let",25:"ID",26:":",28:"[",29:"]",30:"=",32:"t_array",33:"<",34:">",35:",",37:"t_graficar_ts",38:"(",39:")",40:"t_return",42:"t_function",44:"t_boolean",45:"t_string",46:"t_number",47:"t_for",50:"++",51:"--",52:"?",54:"const",55:"IF",57:"ELSE",58:"t_do",59:"WHILE",60:"{",61:"}",62:"CONSOLE",63:".",64:"LOG",65:"-",66:"+",67:"*",68:"/",69:"%",70:"**",72:"<=",73:">=",74:"==",75:"!=",76:"&&",77:"||",78:"!",79:"DECIMAL",80:"NUMBER",81:"STRING",82:"STRINGG",83:"STRINGGG",84:"true",85:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[11,10],[11,11],[11,6],[31,3],[31,1],[20,3],[21,1],[21,2],[18,3],[18,4],[41,3],[41,1],[13,5],[13,6],[13,7],[13,8],[43,5],[43,3],[27,1],[27,1],[27,1],[10,9],[48,1],[48,1],[48,1],[49,1],[49,2],[49,2],[49,2],[49,2],[22,5],[53,1],[53,1],[53,2],[53,2],[53,2],[53,2],[17,3],[19,3],[19,3],[19,3],[19,3],[16,4],[16,6],[16,6],[16,6],[16,4],[16,4],[16,4],[16,2],[15,4],[15,6],[15,6],[15,6],[7,6],[56,2],[56,2],[56,0],[23,6],[8,5],[9,3],[9,2],[14,6],[14,5],[36,2],[36,2],[36,2],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[71,3],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        exports.Lista_errores= Lista_errores;
        exports.pila_funciones= pila_funciones;
        exports.consola= consola;
        exports.ast= ast;
        exports.graficarTS= graficarTS;
        return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 6: case 7: case 9: case 11: case 16: case 17: case 19:
  this.$ = $$[$0];  
break;
case 8: case 10: case 12: case 13: case 14: case 15: case 18: case 20: case 21: case 22:
  this.$ = $$[$0-1];  
break;
case 23:
  console.log("error sintactico en linea " + (yylineno+1) );
break;
case 24:
 this.$= new Arreglo($$[$0-8],$$[$0-1]   ,_$[$0-9].first_line, _$[$0-9].first_column );
break;
case 25:
 this.$= new Arreglo($$[$0-9],$$[$0-1]  ,_$[$0-10].first_line, _$[$0-10].first_column );
break;
case 26:
 this.$= new Arreglo($$[$0-4],null,_$[$0-5].first_line, _$[$0-5].first_column );
break;
case 27:
   $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 28:
 this.$=[$$[$0]]; 
break;
case 29:
this.$= new GraficarTablaSimbolos(_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
 this.$= new Ret(null,_$[$0].first_line, _$[$0].first_column);
break;
case 31:
 this.$= new Ret($$[$0]  ,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 32:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 33:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 34:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 35:

        this.$ = [$$[$0]];
    
break;
case 36:

       
        this.$ = new InsFuncion($$[$0-3], $$[$0], [], "",_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 37:

        this.$ = new InsFuncion($$[$0-4], $$[$0], $$[$0-2], "",_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 38:

        this.$ = new InsFuncion($$[$0-5], $$[$0], [], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 39:

        this.$ = new InsFuncion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1] ,_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 40:

        $$[$0-4].push($$[$0-2]+","+$$[$0]);
        this.$ = $$[$0-4];
    
break;
case 41:

        this.$ = [$$[$0-2]+","+$$[$0]];
    
break;
case 42: case 43: case 44: case 46: case 47: case 48: case 49:
this.$=$$[$0];
break;
case 45:

            this.$=new InstFor($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 50: case 53: case 57: case 60:
 this.$= new Incre($$[$0-1],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 51: case 52: case 58: case 59:
 this.$= new Incre($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 54:

            this.$=new OperadorTernario($$[$0-4], $$[$0-2], $$[$0] ,_$[$0-3].first_line, _$[$0-3].first_column );
    
break;
case 55: case 56:
 this.$=$$[$0]; 
break;
case 61:
 
          this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 62: case 65:
 this.$= new Incre($$[$0-2],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 63: case 64:
 this.$= new Incre($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 66:

        this.$ = new Let($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 67: case 68: case 69:

        this.$ = new Let($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 70: case 71: case 72:

        this.$ = new Let($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 73:

        this.$ = new Let($$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 74:

        this.$ = new Declaration($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 75: case 76: case 77:

        this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 78:

      this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 79: case 80:

        this.$ = $$[$0];
    
break;
case 81:

        this.$ = null;
    
break;
case 82:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 83:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);    
break;
case 84:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 85:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 86:

        this.$ = new Print($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 87:

        this.$ = new Print(null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 88:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,  _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
 this.$ = new Arithmetic($$[$0-1], $$[$0-1], ArithmeticOption.INCREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 90:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.INCREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 91:
 this.$ = new Arithmetic($$[$0-1], $$[$0-1], ArithmeticOption.DECREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 92:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.DECREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 93:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS,  "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 94:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS, "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES, "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV,   "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO,"", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT,   "", _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
  this.$ = $$[$0]; 
break;
case 100:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.IGUAL ,          _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.DIFERENCIACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 106:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 107:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Relational($$[$0], $$[$0],RelationalOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
  this.$ = $$[$0-1]; 
break;
case 110:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 111:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 112:
  this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 113:
  this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 114:
  this.$ = new Literal($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 115: case 116:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 3); 
break;
case 117:
  this.$ = new Access($$[$0],                    _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,36:34,37:$V3,38:$V4,40:$V5,42:$V6,47:$V7,50:$V8,51:$V9,54:$Va,55:$Vb,58:$Vc,59:$Vd,60:$Ve,62:$Vf,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,36:34,37:$V3,38:$V4,40:$V5,42:$V6,47:$V7,50:$V8,51:$V9,54:$Va,55:$Vb,58:$Vc,59:$Vd,60:$Ve,62:$Vf,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),{12:[1,49]},o($Vp,[2,9]),o($Vp,[2,11],{12:[1,50]}),{12:[1,51]},{12:[1,52]},{12:[1,53]},o($Vp,[2,16],{12:[1,54]}),o($Vp,[2,17]),o($Vp,[2,19],{12:[1,55]}),{12:[1,56]},{12:[1,57]},{12:[1,58]},{12:[1,59]},{38:[1,60]},{38:[1,61]},{2:$V0,4:62,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,36:34,37:$V3,38:$V4,40:$V5,42:$V6,47:$V7,50:$V8,51:$V9,54:$Va,55:$Vb,58:$Vc,59:$Vd,60:$Ve,61:[1,63],62:$Vf,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{38:[1,64]},{25:[1,65]},{25:[1,66]},{63:[1,67]},{25:[1,68]},o($Vq,$Vr,{30:$Vs,38:[1,70],50:[1,71],51:[1,72]}),{25:[1,73]},{25:[1,74]},{38:[1,75]},{12:[2,30],25:$Vt,36:76,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{33:$Vw,34:$Vx,52:[1,80],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{9:95,60:$Ve},{25:$Vt,36:96,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($VK,[2,99]),{25:$Vt,36:97,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:98,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($VK,[2,110]),o($VK,[2,111]),o($VK,[2,112]),o($VK,[2,113]),o($VK,[2,114]),o($VK,[2,115]),o($VK,[2,116]),{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,8]),o($Vp,[2,10]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,18]),o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),{25:$Vt,36:99,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:100,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{2:$V0,6:48,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,25:$V2,36:34,37:$V3,38:$V4,40:$V5,42:$V6,47:$V7,50:$V8,51:$V9,54:$Va,55:$Vb,58:$Vc,59:$Vd,60:$Ve,61:[1,101],62:$Vf,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($VL,[2,85]),{15:103,16:104,17:105,24:[1,106],25:[1,107],48:102,54:$Va},{12:$VM,26:[1,108],30:$VN},{38:[1,110]},{64:[1,111]},{26:[1,113],30:[1,112]},{25:$Vt,36:114,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:117,38:$V4,39:[1,115],41:116,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($Vq,$VO,{12:[1,118]}),o($Vq,$VP,{12:[1,119]}),o($Vq,$VQ,{12:[1,120]}),o($Vq,$VR,{12:[1,121]}),{39:[1,122]},{12:[2,31],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},o($VK,$Vr,{50:[1,123],51:[1,124]}),{25:[1,125]},{25:[1,126]},{14:128,17:129,25:$VS,50:$VT,51:$VU,53:127,62:$Vf},{25:$Vt,36:133,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:134,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:135,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:136,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:137,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:138,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:139,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:140,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:141,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:142,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:143,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:144,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:145,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:146,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{59:[1,147]},o($VV,[2,88],{67:$VA,68:$VB,69:$VC,70:$VD}),o($VK,[2,108]),{33:$Vw,34:$Vx,39:[1,148],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{33:$Vw,34:$Vx,39:[1,149],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{33:$Vw,34:$Vx,39:[1,150],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},o($VL,[2,84]),{12:[1,151]},{12:[2,46]},{12:[2,47]},{12:[2,48]},{25:[1,152]},{30:$Vs},{27:153,32:[1,154],44:[1,155],45:[1,156],46:[1,157]},{25:$Vt,36:158,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:[1,161],39:[1,159],43:160},{38:[1,162]},{25:$Vt,36:163,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{44:[1,164],45:[1,165],46:[1,166]},o([12,26,39],[2,61],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),o($VW,[2,32]),{35:[1,168],39:[1,167]},o($VX,[2,35],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),o($Vp,[2,63]),o($Vp,[2,64]),o($Vp,[2,62]),o($Vp,[2,65]),o($VW,[2,29]),o($VK,$VO),o($VK,$VP),o($VK,$VQ),o($VK,$VR),{26:[1,169]},o($VY,[2,55]),o($VY,[2,56]),{25:[1,170]},{30:$Vs,50:[1,171],51:[1,172]},{25:[1,173]},o($VV,[2,93],{67:$VA,68:$VB,69:$VC,70:$VD}),o($VV,[2,94],{67:$VA,68:$VB,69:$VC,70:$VD}),o($VZ,[2,95],{69:$VC,70:$VD}),o($VZ,[2,96],{69:$VC,70:$VD}),o($VK,[2,97]),o($VK,[2,98]),o($V_,[2,100],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($V_,[2,101],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($V_,[2,102],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($V_,[2,103],{65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($V$,[2,104],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF}),o($V$,[2,105],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF}),o([12,26,29,35,39,52,76,77],[2,106],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH}),o([12,26,29,35,39,52,77],[2,107],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI}),{38:[1,174]},o($VK,[2,109]),{9:175,60:$Ve},{9:176,60:$Ve},{25:$Vt,36:177,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{12:$VM,26:[1,178],30:$VN},{28:[1,179]},{33:[1,180]},{12:$V01,28:$V11,30:$V21},{12:$V31,28:$V41,30:$V51},{12:$V61,28:$V71,30:$V81},{12:[2,66],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{9:184,26:[1,185],60:$Ve},{35:[1,187],39:[1,186]},{26:[1,188]},{25:$Vt,36:189,38:$V4,39:[1,190],50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{12:[2,74],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{30:[1,191]},{30:[1,192]},{30:[1,193]},o($VW,[2,33]),{25:$Vt,36:194,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{14:128,17:129,25:$VS,50:$VT,51:$VU,53:195,62:$Vf},o($VY,[2,57]),o($VY,[2,58]),o($VY,[2,59]),o($VY,[2,60]),{25:$Vt,36:196,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($Vp,[2,81],{56:197,57:[1,198]}),o($Vp,[2,83]),{12:[1,199],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{44:[1,200],45:[1,201],46:[1,202]},{29:[1,203]},{27:204,44:$V91,45:$Va1,46:$Vb1},{25:$Vt,36:208,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:209,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:210,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($Vp,[2,36]),{27:211,44:$V91,45:$Va1,46:$Vb1},{9:212,26:[1,213],60:$Ve},{25:[1,214]},{27:215,44:$V91,45:$Va1,46:$Vb1},{33:$Vw,34:$Vx,39:[1,216],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},o($Vc1,[2,87]),{25:$Vt,36:217,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:218,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{25:$Vt,36:219,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},o($VX,[2,34],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{12:[2,54]},{33:$Vw,34:$Vx,39:[1,220],65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},o($Vp,[2,78]),{7:222,9:221,55:$Vb,60:$Ve},{17:224,25:[1,226],49:223,50:[1,225],51:[1,227]},{12:$V01,30:$V21},{12:$V31,30:$V51},{12:$V61,30:$V81},{12:[2,26],30:[1,228]},{34:[1,229]},o($Vd1,$V11),o($Vd1,$V41),o($Vd1,$V71),{12:[2,67],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{12:[2,68],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{12:[2,69],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{9:230,60:$Ve},o($Vp,[2,37]),{27:231,44:$V91,45:$Va1,46:$Vb1},{26:[1,232]},o($VX,[2,41]),o($Vc1,[2,86]),{12:[2,75],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{12:[2,76],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{12:[2,77],33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ},{12:[2,82]},o($Vp,[2,79]),o($Vp,[2,80]),{39:[1,233]},{39:[2,49]},{25:[1,234]},{30:$Vs,50:[1,235],51:[1,236]},{25:[1,237]},{28:[1,238]},{30:[1,239]},o($Vp,[2,38]),{9:240,60:$Ve},{27:241,44:$V91,45:$Va1,46:$Vb1},{9:242,60:$Ve},{39:[2,50]},{39:[2,51]},{39:[2,52]},{39:[2,53]},{25:$Vt,31:243,36:244,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{28:[1,245]},o($Vp,[2,39]),o($VX,[2,40]),o($Vp,[2,45]),{29:[1,246],35:$Ve1},o($Vf1,[2,28],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{25:$Vt,31:248,36:244,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{12:[2,24]},{25:$Vt,36:249,38:$V4,50:$Vu,51:$Vv,65:$Vg,71:37,78:$Vh,79:$Vi,80:$Vj,81:$Vk,82:$Vl,83:$Vm,84:$Vn,85:$Vo},{29:[1,250],35:$Ve1},o($Vf1,[2,27],{33:$Vw,34:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ}),{12:[2,25]}],
defaultActions: {47:[2,1],103:[2,46],104:[2,47],105:[2,48],195:[2,54],220:[2,82],224:[2,49],234:[2,50],235:[2,51],236:[2,52],237:[2,53],246:[2,24],250:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Declaration} = require('../Instruction/Declaration');
    const {Let} = require('../Instruction/let');
    const {Asignacion} = require('../Instruction/Asignacion');
    const {OperadorTernario} = require('../Instruction/OperadorTernario');
    const {DoWhile} = require('../Instruction/Dowhile');
    const {InstFor} = require('../Instruction/InstFor');
    const {Incre} = require('../Instruction/Incre');
    const {InsFuncion} = require('../Instruction/InsFuncion');
    const {Call} = require('../Instruction/Call');
    const {Ret} =require('../Instruction/Ret');
    const {GraficarTablaSimbolos} = require('../Instruction/Gr');
    const {Arreglo} = require('../Instruction/Arreglo');

    var Lista_errores=[];
    var pila_funciones=[];
    var tmp="";
    var consola="";
    var ast="";
    var graficarTS="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('string');/*console.log("+entre en el estado string");*/ tmp="";
break;
case 1: /*console.log("dentro del estado string: "+yy_.yytext);*/  tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 2: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 3: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 4: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 5: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 6: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 7:
                    //console.log("-saliendo del estado string->" +tmp);
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    return 81
                    
break;
case 8:/* skip whitespace */
break;
case 9:// comentario simple línea
break;
case 10:// comentario multiple líneas
break;
case 11:return 84
break;
case 12:return 85
break;
case 13:return 79
break;
case 14:return 80
break;
case 15:return 82
break;
case 16:return 83
break;
case 17:return 70
break;
case 18:return 50
break;
case 19:return 51
break;
case 20:return 66
break;
case 21:return 65
break;
case 22:return 67
break;
case 23:return 68
break;
case 24:return 69
break;
case 25:return 12
break;
case 26:return 26
break;
case 27:return 63
break;
case 28:return 52
break;
case 29:return 35
break;
case 30:return 28
break;
case 31:return 29
break;
case 32:return 72
break;
case 33:return 73
break;
case 34:return 33
break;
case 35:return 34
break;
case 36:return 74
break;
case 37:return 75
break;
case 38:return 77
break;
case 39:return 76
break;
case 40:return 78
break;
case 41:return 30
break;
case 42:return 38
break;
case 43:return 39 
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 32
break;
case 47:return 55
break;
case 48:return 57
break;
case 49:return 59
break;
case 50:return 54
break;
case 51:return 46
break;
case 52:return 45
break;
case 53:return 44
break;
case 54:return 24
break;
case 55:return 58
break;
case 56:return 47
break;
case 57:return 62
break;
case 58:return 64
break;
case 59:return 42
break;
case 60:return 40
break;
case 61:return 37
break;
case 62:return 25;
break;
case 63:return 5
break;
case 64:Lista_errores.push("<tr><td>lexico</td><td>No se reconoce el caracter "+yy_.yytext + '</td><td>' + (yy_.yylineno+1) +'</td><td>'+(yy_.yylloc.first_column+1)+'</td></tr>');	
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([\'][^']*[\']))/i,/^(?:([\`][^`]*[\`]))/i,/^(?:\*\*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:Array\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:let\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true},"INITIAL":{"rules":[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}