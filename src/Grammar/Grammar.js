/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,30],$V2=[1,40],$V3=[1,26],$V4=[1,33],$V5=[1,34],$V6=[1,27],$V7=[1,25],$V8=[1,31],$V9=[1,32],$Va=[1,29],$Vb=[1,22],$Vc=[1,36],$Vd=[1,23],$Ve=[1,24],$Vf=[1,28],$Vg=[1,37],$Vh=[1,39],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[2,5,25,33,36,43,44,46,51,54,55,58,59,62,63,64,65,66,68,81,83,84,85,86,87,88,89],$Vq=[40,41,56,68,69,70,71,72,73,75,76,77,78,79,80],$Vr=[2,126],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,90],$Vw=[1,92],$Vx=[1,85],$Vy=[1,84],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,91],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,96],$VI=[1,97],$VJ=[12,28,34,37,40,41,42,56,68,69,70,71,72,73,75,76,77,78,79,80],$VK=[2,5,25,33,36,43,44,46,51,54,55,58,59,61,62,63,64,65,66,68,81,83,84,85,86,87,88,89],$VL=[2,79],$VM=[1,112],$VN=[2,95],$VO=[2,97],$VP=[1,127],$VQ=[2,96],$VR=[2,98],$VS=[1,141],$VT=[1,140],$VU=[1,142],$VV=[12,28,34,37,40,41,42,56,68,69,75,76,77,78,79,80],$VW=[1,163],$VX=[2,5,12,25,33,36,43,44,46,51,54,55,58,59,62,63,64,65,66,68,81,83,84,85,86,87,88,89],$VY=[34,42],$VZ=[12,37],$V_=[12,28,34,37,40,41,42,56,68,69,70,71,75,76,77,78,79,80],$V$=[12,28,34,37,40,41,42,56,75,76,77,78,79,80],$V01=[12,28,34,37,42,56,77,78,79,80],$V11=[2,76],$V21=[2,48],$V31=[1,199],$V41=[2,77],$V51=[2,49],$V61=[1,200],$V71=[2,78],$V81=[2,50],$V91=[1,201],$Va1=[1,213],$Vb1=[28,42],$Vc1=[2,117],$Vd1=[1,230],$Ve1=[1,231],$Vf1=[1,232],$Vg1=[2,5,12,25,33,36,37,43,44,46,51,54,55,58,59,62,63,64,65,66,68,81,83,84,85,86,87,88,89],$Vh1=[2,116],$Vi1=[34,41,42,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"Statement":9,"FOR":10,"INSTARRAR":11,";":12,"FUNCIONN":13,"PrintSt":14,"Declaration1":15,"Declaration2":16,"Asignacion":17,"CALLFUNCION":18,"INCREMENTO":19,"GRAFICAR":20,"INSARRREGLO":21,"RETORNO":22,"OperadorTernario":23,"DOWHILE":24,"ID":25,"[":26,"Expr":27,"]":28,"=":29,"ContenidoArray":30,".":31,"t_push":32,"(":33,")":34,"t_pop":35,"t_let":36,":":37,"TIPOS":38,"t_array":39,"<":40,">":41,",":42,"t_graficar_ts":43,"t_return":44,"ListaExpr":45,"t_function":46,"Parametros":47,"t_boolean":48,"t_string":49,"t_number":50,"t_for":51,"for1":52,"for2":53,"++":54,"--":55,"?":56,"ParaOperadorTernario":57,"const":58,"IF":59,"ElseSt":60,"ELSE":61,"t_do":62,"WHILE":63,"{":64,"}":65,"CONSOLE":66,"LOG":67,"-":68,"+":69,"*":70,"/":71,"%":72,"**":73,"F":74,"<=":75,">=":76,"==":77,"!=":78,"&&":79,"||":80,"!":81,"t_length":82,"DECIMAL":83,"NUMBER":84,"STRING":85,"STRINGG":86,"STRINGGG":87,"true":88,"false":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:";",25:"ID",26:"[",28:"]",29:"=",31:".",32:"t_push",33:"(",34:")",35:"t_pop",36:"t_let",37:":",39:"t_array",40:"<",41:">",42:",",43:"t_graficar_ts",44:"t_return",46:"t_function",48:"t_boolean",49:"t_string",50:"t_number",51:"t_for",54:"++",55:"--",56:"?",58:"const",59:"IF",61:"ELSE",62:"t_do",63:"WHILE",64:"{",65:"}",66:"CONSOLE",67:"LOG",68:"-",69:"+",70:"*",71:"/",72:"%",73:"**",75:"<=",76:">=",77:"==",78:"!=",79:"&&",80:"||",81:"!",82:"t_length",83:"DECIMAL",84:"NUMBER",85:"STRING",86:"STRINGG",87:"STRINGGG",88:"true",89:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[21,7],[21,6],[21,7],[21,6],[11,10],[11,11],[11,6],[11,7],[30,3],[30,1],[20,3],[22,1],[22,2],[18,3],[18,4],[45,3],[45,1],[13,5],[13,6],[13,7],[13,8],[47,5],[47,3],[38,1],[38,1],[38,1],[10,9],[52,1],[52,1],[52,1],[53,1],[53,2],[53,2],[53,2],[53,2],[23,5],[57,1],[57,1],[57,2],[57,2],[57,2],[57,2],[17,3],[19,3],[19,3],[19,3],[19,3],[16,4],[16,6],[16,6],[16,6],[16,4],[16,4],[16,4],[16,2],[15,4],[15,6],[15,6],[15,6],[7,6],[60,2],[60,2],[60,0],[24,6],[8,5],[9,3],[9,2],[14,6],[14,5],[27,2],[27,2],[27,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,5],[27,4],[74,3],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        exports.Lista_errores= Lista_errores;
        exports.pila_funciones= pila_funciones;
        exports.consola= consola;
        exports.ast= ast;
        exports.graficarTS= graficarTS;
        return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 6: case 7: case 9: case 11: case 16: case 17: case 19: case 20:
  this.$ = $$[$0];  
break;
case 8: case 10: case 12: case 13: case 14: case 15: case 18: case 21: case 22: case 23:
  this.$ = $$[$0-1];  
break;
case 24:
  console.log("error sintactico en linea " + (yylineno+1) );
break;
case 25:
 this.$=new AccesoArreglo($$[$0-6],null,$$[$0-4], $$[$0-1]  ,false,false, _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 26:
 this.$=new AccesoArreglo($$[$0-5],$$[$0-2],null, null,false,false, _$[$0-5].first_line, _$[$0-5].first_column );
break;
case 27:
 this.$=new AccesoArreglo($$[$0-6],null,null,$$[$0-2] ,true ,false, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 28:
 this.$=new AccesoArreglo($$[$0-5],null,null,$$[$0-1] ,true ,true , _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 29:
 this.$= new Arreglo($$[$0-8],$$[$0-1]  ,$$[$0-6],[], _$[$0-9].first_line, _$[$0-9].first_column );
break;
case 30:
 this.$= new Arreglo($$[$0-9],$$[$0-1] ,$$[$0-5],[], _$[$0-10].first_line, _$[$0-10].first_column );
break;
case 31:
 this.$= new Arreglo($$[$0-4],null,$$[$0-2],[], _$[$0-5].first_line, _$[$0-5].first_column );
break;
case 32:
 this.$= new Arreglo($$[$0-5],null,$$[$0-1],[], _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 33:
   $$[$0-2].push($$[$0]);  this.$ = $$[$0-2];
break;
case 34:
 this.$=[$$[$0]]; 
break;
case 35:
this.$= new GraficarTablaSimbolos(_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 36:
 this.$= new Ret(null,_$[$0].first_line, _$[$0].first_column);
break;
case 37:
 this.$= new Ret($$[$0]  ,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 38:

        this.$ = new Call($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 39:

        this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 40:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 41:

        this.$ = [$$[$0]];
    
break;
case 42:

       
        this.$ = new InsFuncion($$[$0-3], $$[$0], [], "",_$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 43:

        this.$ = new InsFuncion($$[$0-4], $$[$0], $$[$0-2], "",_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 44:

        this.$ = new InsFuncion($$[$0-5], $$[$0], [], $$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 45:

        this.$ = new InsFuncion($$[$0-6], $$[$0], $$[$0-4], $$[$0-1] ,_$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 46:

        $$[$0-4].push($$[$0-2]+","+$$[$0]);
        this.$ = $$[$0-4];
    
break;
case 47:

        this.$ = [$$[$0-2]+","+$$[$0]];
    
break;
case 48: case 49: case 50: case 52: case 53: case 54: case 55:
this.$=$$[$0];
break;
case 51:

            this.$=new InstFor($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 56: case 59: case 63: case 66:
 this.$= new Incre($$[$0-1],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57: case 58: case 64: case 65:
 this.$= new Incre($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 60:

            this.$=new OperadorTernario($$[$0-4], $$[$0-2], $$[$0] ,_$[$0-3].first_line, _$[$0-3].first_column );
    
break;
case 61: case 62:
 this.$=$$[$0]; 
break;
case 67:
 
          this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 68: case 71:
 this.$= new Incre($$[$0-2],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 69: case 70:
 this.$= new Incre($$[$0-1],$$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 72:

        this.$ = new Let($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 73: case 74: case 75:

        this.$ = new Let($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 76: case 77: case 78:

        this.$ = new Let($$[$0-2], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 79:

        this.$ = new Let($$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 80:

        this.$ = new Declaration($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 81: case 82: case 83:

        this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 84:

      this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 85: case 86:

        this.$ = $$[$0];
    
break;
case 87:

        this.$ = null;
    
break;
case 88:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column);    
break;
case 89:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);    
break;
case 90:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 91:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 92:

        this.$ = new Print($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 93:

        this.$ = new Print(null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 94:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,    _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 95:
 this.$ = new IncreDecre($$[$0-1], $$[$0-1], IncreDecreOption.INCREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 96:
 this.$ = new IncreDecre($$[$0], $$[$0], IncreDecreOption.INCREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 97:
 this.$ = new IncreDecre($$[$0-1], $$[$0-1], IncreDecreOption.DECREMENTO1, $$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 98:
 this.$ = new IncreDecre($$[$0], $$[$0], IncreDecreOption.DECREMENTO2, $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 99:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MAS            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 100:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MENOS          , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 101:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MULTIPLICACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO         , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT            , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 105:
  this.$ = $$[$0]; 
break;
case 106:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 107:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 108:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYOR,           _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 109:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL,      _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.IGUAL ,          _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.DIFERENCIACION , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 113:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR   , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 114:
 this.$ = new Relational($$[$0], $$[$0],RelationalOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 115:
 this.$= new ExpreArray($$[$0-2],false,false,null,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 116:
 this.$= new ExpreArray($$[$0-4],true ,false,null,_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 117:
 this.$= new ExpreArray($$[$0-3],true ,true ,$$[$0-1]  ,_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 118:
  this.$ = $$[$0-1]; 
break;
case 119:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 120:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 121:
  this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 122:
  this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 123:
  this.$ = new Literal($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 124: case 125:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 3); 
break;
case 126:
  this.$ = new Access($$[$0],                    _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,27:35,33:$V2,36:$V3,43:$V4,44:$V5,46:$V6,51:$V7,54:$V8,55:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve,66:$Vf,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,27:35,33:$V2,36:$V3,43:$V4,44:$V5,46:$V6,51:$V7,54:$V8,55:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve,66:$Vf,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),{12:[1,50]},o($Vp,[2,9]),o($Vp,[2,11],{12:[1,51]}),{12:[1,52]},{12:[1,53]},{12:[1,54]},o($Vp,[2,16],{12:[1,55]}),o($Vp,[2,17]),o($Vp,[2,19],{12:[1,56]}),o($Vp,[2,20]),{12:[1,57]},{12:[1,58]},{12:[1,59]},{12:[1,60]},{33:[1,61]},{33:[1,62]},{2:$V0,4:63,6:3,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,27:35,33:$V2,36:$V3,43:$V4,44:$V5,46:$V6,51:$V7,54:$V8,55:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve,65:[1,64],66:$Vf,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{33:[1,65]},{25:[1,66]},{25:[1,67]},{31:[1,68]},{25:[1,69]},o($Vq,$Vr,{26:[1,74],29:[1,70],31:[1,75],33:[1,71],54:[1,72],55:[1,73]}),{25:[1,76]},{25:[1,77]},{33:[1,78]},{12:[2,36],25:$Vs,27:79,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{40:$Vv,41:$Vw,56:[1,83],68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{9:98,64:$Ve},{25:$Vs,27:99,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VJ,[2,105]),{25:$Vs,27:100,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:101,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VJ,[2,119]),o($VJ,[2,120]),o($VJ,[2,121]),o($VJ,[2,122]),o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,125]),{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,8]),o($Vp,[2,10]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,18]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),{25:$Vs,27:102,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:103,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,27:35,33:$V2,36:$V3,43:$V4,44:$V5,46:$V6,51:$V7,54:$V8,55:$V9,58:$Va,59:$Vb,62:$Vc,63:$Vd,64:$Ve,65:[1,104],66:$Vf,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VK,[2,91]),{15:106,16:107,17:108,25:[1,110],36:[1,109],52:105,58:$Va},{12:$VL,29:$VM,37:[1,111]},{33:[1,113]},{67:[1,114]},{29:[1,115],37:[1,116]},{25:$Vs,26:[1,118],27:117,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:121,33:$V2,34:[1,119],45:120,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($Vq,$VN,{12:[1,122]}),o($Vq,$VO,{12:[1,123]}),{25:$Vs,27:124,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{32:[1,125],35:[1,126],82:$VP},o($Vq,$VQ,{12:[1,128]}),o($Vq,$VR,{12:[1,129]}),{34:[1,130]},{12:[2,37],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($VJ,$Vr,{26:[1,134],31:[1,133],54:[1,131],55:[1,132]}),{25:[1,135]},{25:[1,136]},{14:138,17:139,25:$VS,54:$VT,55:$VU,57:137,66:$Vf},{25:$Vs,27:143,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:144,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:145,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:146,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:147,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:148,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:149,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:150,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:151,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:152,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:153,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:154,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:155,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:156,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{63:[1,157]},o($VV,[2,94],{70:$Vz,71:$VA,72:$VB,73:$VC}),o($VJ,[2,114]),{34:[1,158],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{34:[1,159],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{34:[1,160],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($VK,[2,90]),{12:[1,161]},{12:[2,52]},{12:[2,53]},{12:[2,54]},{25:[1,162]},{29:$VW},{38:164,39:[1,165],48:[1,166],49:[1,167],50:[1,168]},{25:$Vs,27:169,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:[1,172],34:[1,170],47:171},{33:[1,173]},{25:$Vs,27:174,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{48:[1,175],49:[1,176],50:[1,177]},o([12,34,37],[2,67],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),{25:$Vs,27:179,30:178,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VX,[2,38]),{34:[1,180],42:[1,181]},o($VY,[2,41],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($Vp,[2,69]),o($Vp,[2,70]),{28:[1,182],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{33:[1,183]},{33:[1,184]},o($VJ,[2,115]),o($Vp,[2,68]),o($Vp,[2,71]),o($VX,[2,35]),o($VJ,$VN),o($VJ,$VO),{35:[1,185],82:$VP},{25:$Vs,27:186,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VJ,$VQ),o($VJ,$VR),{37:[1,187]},o($VZ,[2,61]),o($VZ,[2,62]),{25:[1,188]},{29:$VW,54:[1,189],55:[1,190]},{25:[1,191]},o($VV,[2,99],{70:$Vz,71:$VA,72:$VB,73:$VC}),o($VV,[2,100],{70:$Vz,71:$VA,72:$VB,73:$VC}),o($V_,[2,101],{72:$VB,73:$VC}),o($V_,[2,102],{72:$VB,73:$VC}),o($VJ,[2,103]),o($VJ,[2,104]),o($V$,[2,106],{68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC}),o($V$,[2,107],{68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC}),o($V$,[2,108],{68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC}),o($V$,[2,109],{68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC}),o($V01,[2,110],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE}),o($V01,[2,111],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE}),o([12,28,34,37,42,56,79,80],[2,112],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG}),o([12,28,34,37,42,56,80],[2,113],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{33:[1,192]},o($VJ,[2,118]),{9:193,64:$Ve},{9:194,64:$Ve},{25:$Vs,27:195,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{12:$VL,29:$VM,37:[1,196]},{25:$Vs,27:117,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{26:[1,197]},{40:[1,198]},{12:$V11,26:$V21,29:$V31},{12:$V41,26:$V51,29:$V61},{12:$V71,26:$V81,29:$V91},{12:[2,72],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{9:202,37:[1,203],64:$Ve},{34:[1,204],42:[1,205]},{37:[1,206]},{25:$Vs,27:207,33:$V2,34:[1,208],54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{12:[2,80],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{29:[1,209]},{29:[1,210]},{29:[1,211]},{28:[1,212],42:$Va1},o($Vb1,[2,34],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),o($VX,[2,39]),{25:$Vs,27:214,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($Vq,$Vc1,{29:[1,215]}),{25:$Vs,27:216,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{34:[1,217]},{33:[1,218]},{28:[1,219],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{14:138,17:139,25:$VS,54:$VT,55:$VU,57:220,66:$Vf},o($VZ,[2,63]),o($VZ,[2,64]),o($VZ,[2,65]),o($VZ,[2,66]),{25:$Vs,27:221,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($Vp,[2,87],{60:222,61:[1,223]}),o($Vp,[2,89]),{12:[1,224],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{48:[1,225],49:[1,226],50:[1,227]},{28:[1,228]},{38:229,48:$Vd1,49:$Ve1,50:$Vf1},{25:$Vs,27:233,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:234,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:235,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($Vp,[2,42]),{38:236,48:$Vd1,49:$Ve1,50:$Vf1},{9:237,37:[1,238],64:$Ve},{25:[1,239]},{38:240,48:$Vd1,49:$Ve1,50:$Vf1},{34:[1,241],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($Vg1,[2,93]),{25:$Vs,27:242,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:243,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{25:$Vs,27:244,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{12:[1,245]},{25:$Vs,27:246,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},o($VY,[2,40],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),{25:$Vs,27:247,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{34:[1,248],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($Vq,$Vh1,{12:[1,249]}),{34:[1,250]},o($VJ,$Vc1),{12:[2,60]},{34:[1,251],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($Vp,[2,84]),{7:253,9:252,59:$Vb,64:$Ve},{17:255,25:[1,257],53:254,54:[1,256],55:[1,258]},{12:$V11,29:$V31},{12:$V41,29:$V61},{12:$V71,29:$V91},{12:[2,31],29:[1,259]},{41:[1,260]},o($Vi1,$V21),o($Vi1,$V51),o($Vi1,$V81),{12:[2,73],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{12:[2,74],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{12:[2,75],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{9:261,64:$Ve},o($Vp,[2,43]),{38:262,48:$Vd1,49:$Ve1,50:$Vf1},{37:[1,263]},o($VY,[2,47]),o($Vg1,[2,92]),{12:[2,81],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{12:[2,82],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{12:[2,83],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},o($Vp,[2,26]),o($Vb1,[2,33],{40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI}),{12:[1,264],40:$Vv,41:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH,80:$VI},{12:[1,265]},o($Vp,[2,28]),o($VJ,$Vh1),{12:[2,88]},o($Vp,[2,85]),o($Vp,[2,86]),{34:[1,266]},{34:[2,55]},{25:[1,267]},{29:$VW,54:[1,268],55:[1,269]},{25:[1,270]},{26:[1,271]},{12:[2,32],29:[1,272]},o($Vp,[2,44]),{9:273,64:$Ve},{38:274,48:$Vd1,49:$Ve1,50:$Vf1},o($Vp,[2,25]),o($Vp,[2,27]),{9:275,64:$Ve},{34:[2,56]},{34:[2,57]},{34:[2,58]},{34:[2,59]},{25:$Vs,27:179,30:276,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{26:[1,277]},o($Vp,[2,45]),o($VY,[2,46]),o($Vp,[2,51]),{28:[1,278],42:$Va1},{25:$Vs,27:179,30:279,33:$V2,54:$Vt,55:$Vu,68:$Vg,74:38,81:$Vh,83:$Vi,84:$Vj,85:$Vk,86:$Vl,87:$Vm,88:$Vn,89:$Vo},{12:[2,29]},{28:[1,280],42:$Va1},{12:[2,30]}],
defaultActions: {48:[2,1],106:[2,52],107:[2,53],108:[2,54],220:[2,60],251:[2,88],255:[2,55],267:[2,56],268:[2,57],269:[2,58],270:[2,59],278:[2,29],280:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Declaration} = require('../Instruction/Declaration');
    const {Let} = require('../Instruction/let');
    const {Asignacion} = require('../Instruction/Asignacion');
    const {OperadorTernario} = require('../Instruction/OperadorTernario');
    const {DoWhile} = require('../Instruction/Dowhile');
    const {InstFor} = require('../Instruction/InstFor');
    const {Incre} = require('../Instruction/Incre');
    const {InsFuncion} = require('../Instruction/InsFuncion');
    const {Call} = require('../Instruction/Call');
    const {Ret} =require('../Instruction/Ret');
    const {GraficarTablaSimbolos} = require('../Instruction/Gr');
    const {Arreglo} = require('../Instruction/Arreglo');
    const {AccesoArreglo} = require('../Instruction/AccesoArreglo');
    const {ExpreArray} = require('../Expression/ExpreArray');
    const {ArithmeticOption} = require('../Expression/ArithmeticOption');
    const {IncreDecre} = require('../Expression/IncreDecre')
    const {IncreDecreOption} = require('../Expression/IncreDecreOption')
    var Lista_errores=[];
    var pila_funciones=[];
    var tmp="";
    var consola="";
    var ast="";
    var graficarTS="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('string');/*console.log("+entre en el estado string");*/ tmp="";
break;
case 1: /*console.log("dentro del estado string: "+yy_.yytext);*/  tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 2: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 3: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 4: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 5: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 6: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 7:
                    //console.log("-saliendo del estado string->" +tmp);
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    return 85
                    
break;
case 8:/* skip whitespace */
break;
case 9:// comentario simple línea
break;
case 10:// comentario multiple líneas
break;
case 11:return 88
break;
case 12:return 89
break;
case 13:return 83
break;
case 14:return 84
break;
case 15:return 86
break;
case 16:return 87
break;
case 17:return 73
break;
case 18:return 54
break;
case 19:return 55
break;
case 20:return 69
break;
case 21:return 68
break;
case 22:return 70
break;
case 23:return 71
break;
case 24:return 72
break;
case 25:return 12
break;
case 26:return 37
break;
case 27:return 31
break;
case 28:return 56
break;
case 29:return 42
break;
case 30:return 26
break;
case 31:return 28
break;
case 32:return 75
break;
case 33:return 76
break;
case 34:return 40
break;
case 35:return 41
break;
case 36:return 77
break;
case 37:return 78
break;
case 38:return 80
break;
case 39:return 79
break;
case 40:return 81
break;
case 41:return 29
break;
case 42:return 33
break;
case 43:return 34 
break;
case 44:return 64
break;
case 45:return 65
break;
case 46:return 82
break;
case 47:return 32
break;
case 48:return 35
break;
case 49:return 39
break;
case 50:return 59
break;
case 51:return 61
break;
case 52:return 63
break;
case 53:return 58
break;
case 54:return 50
break;
case 55:return 49
break;
case 56:return 48
break;
case 57:return 36
break;
case 58:return 62
break;
case 59:return 51
break;
case 60:return 66
break;
case 61:return 67
break;
case 62:return 46
break;
case 63:return 44
break;
case 64:return 43
break;
case 65:return 25;
break;
case 66:return 5
break;
case 67:Lista_errores.push("<tr><td>lexico</td><td>No se reconoce el caracter "+yy_.yytext + '</td><td>' + (yy_.yylineno+1) +'</td><td>'+(yy_.yylloc.first_column+1)+'</td></tr>');	
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([\'][^']*[\']))/i,/^(?:([\`][^`]*[\`]))/i,/^(?:\*\*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:length\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:Array\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:let\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:return\b)/i,/^(?:graficar_ts\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}