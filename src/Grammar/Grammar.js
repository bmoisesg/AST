/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,21],$V2=[1,25],$V3=[1,33],$V4=[1,20],$V5=[1,26],$V6=[1,27],$V7=[1,24],$V8=[1,23],$V9=[1,17],$Va=[1,29],$Vb=[1,18],$Vc=[1,19],$Vd=[1,22],$Ve=[1,30],$Vf=[1,32],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[2,5,23,24,25,32,39,40,41,42,43,46,47,48,49,50,53,68,69,70,71,72,73,74,75],$Vo=[2,83],$Vp=[1,60],$Vq=[1,67],$Vr=[1,66],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,82],$VF=[13,26,35,37,53,54,55,56,57,58,60,61,62,63,64,65,66,67],$VG=[2,5,23,24,25,32,39,40,41,42,43,45,46,47,48,49,50,53,68,69,70,71,72,73,74,75],$VH=[1,92],$VI=[13,26,35,37,53,54,60,61,62,63,64,65,66,67],$VJ=[1,125],$VK=[1,126],$VL=[1,127],$VM=[13,37],$VN=[13,26,35,37,53,54,55,56,60,61,62,63,64,65,66,67],$VO=[13,26,35,37,60,61,62,63,64,65,66,67],$VP=[13,26,35,37,64,65,66,67],$VQ=[21,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instructions":4,"EOF":5,"Instruction":6,"IfSt":7,"WhileSt":8,"Statement":9,"FOR":10,"FUNCION":11,"PrintSt":12,";":13,"Declaration1":14,"Declaration2":15,"Asignacion":16,"INCREMENTO":17,"OperadorTernario":18,"DOWHILE":19,"ListaExpr":20,",":21,"Expr":22,"t_function":23,"ID":24,"(":25,")":26,"Parametros":27,"TIPOS":28,"t_boolean":29,"t_string":30,"t_number":31,"t_for":32,"for1":33,"for2":34,"?":35,"ParaOperadorTernario":36,":":37,"=":38,"++":39,"--":40,"t_let":41,"const":42,"IF":43,"ElseSt":44,"ELSE":45,"t_do":46,"WHILE":47,"{":48,"}":49,"CONSOLE":50,".":51,"LOG":52,"-":53,"+":54,"*":55,"/":56,"%":57,"**":58,"F":59,"<":60,"<=":61,">":62,">=":63,"==":64,"!=":65,"&&":66,"||":67,"!":68,"DECIMAL":69,"NUMBER":70,"STRING":71,"STRINGG":72,"STRINGGG":73,"true":74,"false":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:";",21:",",23:"t_function",24:"ID",25:"(",26:")",29:"t_boolean",30:"t_string",31:"t_number",32:"t_for",35:"?",37:":",38:"=",39:"++",40:"--",41:"t_let",42:"const",43:"IF",45:"ELSE",46:"t_do",47:"WHILE",48:"{",49:"}",50:"CONSOLE",51:".",52:"LOG",53:"-",54:"+",55:"*",56:"/",57:"%",58:"**",60:"<",61:"<=",62:">",63:">=",64:"==",65:"!=",66:"&&",67:"||",68:"!",69:"DECIMAL",70:"NUMBER",71:"STRING",72:"STRINGG",73:"STRINGGG",74:"true",75:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[20,3],[20,1],[11,5],[11,6],[27,4],[27,2],[28,1],[28,1],[28,1],[10,9],[33,1],[33,1],[33,1],[34,1],[18,5],[36,1],[36,1],[16,3],[17,2],[17,2],[17,2],[17,2],[15,4],[15,6],[15,6],[15,6],[15,2],[14,4],[14,6],[14,6],[14,6],[7,6],[44,2],[44,2],[44,0],[19,6],[8,5],[9,3],[9,2],[12,6],[12,5],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[59,3],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        exports.Lista_errores= Lista_errores;
        return $$[$0-1];  
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]];            
break;
case 4: case 5: case 6: case 7: case 8:
  this.$ = $$[$0];  
break;
case 9: case 10: case 11: case 12: case 13: case 14: case 15:
  this.$ = $$[$0-1];  
break;
case 16:
  console.log("error sintactico en linea " + (yylineno+1) );
break;
case 17:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 18: case 22:

        this.$ = [$$[$0]];
    
break;
case 19:

        this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 20:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 21:

        $$[$0-3].push($$[$0]);
        this.$ = $$[$0-3];
    
break;
case 23: case 24: case 25: case 27: case 28: case 29: case 30:
this.$=$$[$0];
break;
case 26:

            this.$=new InstFor($$[$0-6], $$[$0-4], $$[$0-2] , $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
    
break;
case 31:

            this.$=new OperadorTernario($$[$0-4], $$[$0-2], $$[$0] ,_$[$0-4].first_line, _$[$0-4].first_column );
    
break;
case 32: case 33:
 this.$=$$[$0]; 
break;
case 34:
 
          this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 35: case 38:
 this.$= new Incre($$[$0-1],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 36: case 37:
 this.$= new Incre($$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 39:

        this.$ = new Let($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 40: case 41: case 42:

        this.$ = new Let($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 43:

        this.$ = new Let($$[$0], null, null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 44:

        this.$ = new Declaration($$[$0-2], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 45: case 46: case 47:

        this.$ = new Declaration($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 48:

      this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);  
break;
case 49: case 50:

        this.$ = $$[$0];
    
break;
case 51:

        this.$ = null;
    
break;
case 52:
  this.$ = new DoWhile($$[$0-1], $$[$0-4], _$[$0-1].first_line, _$[$0-1].first_column);    
break;
case 53:
  this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-2].first_column);    
break;
case 54:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 56:

        this.$ = new Print($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 57:

        this.$ = new Print(null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 58:
 this.$ = new Arithmetic($$[$0], $$[$0], ArithmeticOption.NEGACION,  _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.PLUS,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MINUS,  _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.TIMES,  _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.DIV,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Arithmetic($$[$0-2], $$[$0], ArithmeticOption.POT,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
  this.$ = $$[$0]; 
break;
case 66:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENOR,           _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MENORIGUAL,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYOR,           _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.MAYORIGUAL,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.IGUAL ,          _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.DIFERENCIACION , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.AND  , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Relational($$[$0-2], $$[$0],RelationalOption.OR   , _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Relational($$[$0], $$[$0],RelationalOption.NOT  , _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 75:
  this.$ = $$[$0-1]; 
break;
case 76:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 0); 
break;
case 77:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 1); 
break;
case 78:
  this.$ = new Literal($$[$0].replace(/\"/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 79:
  this.$ = new Literal($$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 80:
  this.$ = new Literal($$[$0].replace(/\`/g,""), _$[$0].first_line, _$[$0].first_column, 2); 
break;
case 81: case 82:
  this.$ = new Literal($$[$0],                   _$[$0].first_line, _$[$0].first_column, 3); 
break;
case 83:
  this.$ = new Access($$[$0],                    _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,22:28,23:$V1,24:$V2,25:$V3,32:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,46:$Va,47:$Vb,48:$Vc,50:$Vd,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,22:28,23:$V1,24:$V2,25:$V3,32:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,46:$Va,47:$Vb,48:$Vc,50:$Vd,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),{13:[1,43]},{13:[1,44]},{13:[1,45]},{13:[1,46]},{13:[1,47]},{13:[1,48]},{13:[1,49]},{13:[1,50]},{25:[1,51]},{25:[1,52]},{2:$V0,4:53,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,22:28,23:$V1,24:$V2,25:$V3,32:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,46:$Va,47:$Vb,48:$Vc,49:[1,54],50:$Vd,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{25:[1,55]},{24:[1,56]},{51:[1,57]},{24:[1,58]},{24:[1,59]},o([35,53,54,55,56,57,58,60,61,62,63,64,65,66,67],$Vo,{38:$Vp,39:[1,61],40:[1,62]}),{24:[1,63]},{24:[1,64]},{35:[1,65],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{9:80,48:$Vc},{22:81,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},o($VF,[2,65]),{22:83,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:84,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},o($VF,[2,76]),o($VF,[2,77]),o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),{1:[2,1]},o($Vn,[2,2]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),{22:85,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:86,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{2:$V0,6:42,7:4,8:5,9:6,10:7,11:8,12:9,14:10,15:11,16:12,17:13,18:14,19:15,22:28,23:$V1,24:$V2,25:$V3,32:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,46:$Va,47:$Vb,48:$Vc,49:[1,87],50:$Vd,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},o($VG,[2,55]),{14:89,15:90,16:91,24:$VH,33:88,41:$V7,42:$V8},{25:[1,93]},{52:[1,94]},{37:[1,96],38:[1,95]},{13:[2,43],37:[1,98],38:[1,97]},{22:99,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{13:[2,36]},{13:[2,37]},{13:[2,35]},{13:[2,38]},{12:101,16:102,24:$VH,36:100,50:$Vd},{22:103,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:104,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:105,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:106,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:107,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:108,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:109,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:110,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:111,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:112,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:113,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:114,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:115,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:116,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{47:[1,117]},o($VI,[2,58],{55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VF,$Vo),o($VF,[2,74]),{26:[1,118],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{26:[1,119],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{26:[1,120],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},o($VG,[2,54]),{13:[1,121]},{13:[2,27]},{13:[2,28]},{13:[2,29]},{38:$Vp},{26:[1,122],27:123,28:124,29:$VJ,30:$VK,31:$VL},{25:[1,128]},{22:129,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{29:[1,130],30:[1,131],31:[1,132]},{22:133,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{29:[1,134],30:[1,135],31:[1,136]},o([13,26,37],[2,34],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),{37:[1,137]},o($VM,[2,32]),o($VM,[2,33]),o($VI,[2,59],{55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VI,[2,60],{55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VN,[2,61],{57:$Vu,58:$Vv}),o($VN,[2,62],{57:$Vu,58:$Vv}),o($VF,[2,63]),o($VF,[2,64]),o($VO,[2,66],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VO,[2,67],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VO,[2,68],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VO,[2,69],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VP,[2,70],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz}),o($VP,[2,71],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz}),o([13,26,35,37,66,67],[2,72],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB}),o([13,26,35,37,67],[2,73],{53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC}),{25:[1,138]},o($VF,[2,75]),{9:139,48:$Vc},{9:140,48:$Vc},{22:141,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{9:142,48:$Vc},{21:[1,144],26:[1,143]},{24:[1,145]},{24:[2,23]},{24:[2,24]},{24:[2,25]},{22:146,24:$VE,25:$V3,26:[1,147],53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{13:[2,44],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{38:[1,148]},{38:[1,149]},{38:[1,150]},{13:[2,39],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{38:[1,151]},{38:[1,152]},{38:[1,153]},{12:101,16:102,24:$VH,36:154,50:$Vd},{22:155,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},o($Vn,[2,51],{44:156,45:[1,157]}),o($Vn,[2,53]),{13:[1,158],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},o($Vn,[2,19]),{9:159,48:$Vc},{28:160,29:$VJ,30:$VK,31:$VL},o($VQ,[2,22]),{26:[1,161],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},o($VM,[2,57]),{22:162,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:163,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:164,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:165,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:166,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{22:167,24:$VE,25:$V3,53:$Ve,59:31,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm},{13:[2,31]},{26:[1,168],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},o($Vn,[2,48]),{7:170,9:169,43:$V9,48:$Vc},{16:172,24:$VH,34:171},o($Vn,[2,20]),{24:[1,173]},o($VM,[2,56]),{13:[2,45],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,46],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,47],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,40],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,41],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,42],53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD},{13:[2,52]},o($Vn,[2,49]),o($Vn,[2,50]),{26:[1,174]},{26:[2,30]},o($VQ,[2,21]),{9:175,48:$Vc},o($Vn,[2,26])],
defaultActions: {41:[2,1],61:[2,36],62:[2,37],63:[2,35],64:[2,38],89:[2,27],90:[2,28],91:[2,29],125:[2,23],126:[2,24],127:[2,25],154:[2,31],168:[2,52],172:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Arithmetic, ArithmeticOption} = require('../Expression/Arithmetic');
    const {Relational, RelationalOption} = require('../Expression/Relational');
    const {Access} = require('../Expression/Access');
    const {Literal} = require('../Expression/Literal');
    const {If} = require('../Instruction/If');
    const {Print} = require('../Instruction/Print');
    const {Statement} = require('../Instruction/Statement');
    const {While} = require('../Instruction/While');
    const {Declaration} = require('../Instruction/Declaration');
    const {Let} = require('../Instruction/let');
    const {Asignacion} = require('../Instruction/Asignacion');
    const {OperadorTernario} = require('../Instruction/OperadorTernario');
    const {DoWhile} = require('../Instruction/Dowhile');
    const {InstFor} = require('../Instruction/InstFor');
    const {Incre} = require('../Instruction/Incre')
    
    var Lista_errores=[];
    var tmp="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('string');/*console.log("+entre en el estado string");*/ tmp="";
break;
case 1: /*console.log("dentro del estado string: "+yy_.yytext);*/  tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 2: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 3: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 4: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 5: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 6: tmp= tmp+yy_.yytext;   this.begin('string'); 
break;
case 7:
                    //console.log("-saliendo del estado string->" +tmp);
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    return 71
                    
break;
case 8:/* skip whitespace */
break;
case 9:// comentario simple línea
break;
case 10:// comentario multiple líneas
break;
case 11:return 74
break;
case 12:return 75
break;
case 13:return 69
break;
case 14:return 70
break;
case 15:return 72
break;
case 16:return 73
break;
case 17:return 58
break;
case 18:return 39
break;
case 19:return 40
break;
case 20:return 54
break;
case 21:return 53
break;
case 22:return 55
break;
case 23:return 56
break;
case 24:return 57
break;
case 25:return 13
break;
case 26:return 37
break;
case 27:return 51
break;
case 28:return 35
break;
case 29:return 61
break;
case 30:return 63
break;
case 31:return 60
break;
case 32:return 62
break;
case 33:return 64
break;
case 34:return 65
break;
case 35:return 67
break;
case 36:return 66
break;
case 37:return 68
break;
case 38:return 38
break;
case 39:return 25
break;
case 40:return 26 
break;
case 41:return 48
break;
case 42:return 49
break;
case 43:return 43
break;
case 44:return 45
break;
case 45:return 47
break;
case 46:return 42
break;
case 47:return 31
break;
case 48:return 30
break;
case 49:return 29
break;
case 50:return 41
break;
case 51:return 46
break;
case 52:return 32
break;
case 53:return 50
break;
case 54:return 52
break;
case 55:return 23
break;
case 56:return 24;
break;
case 57:return 5
break;
case 58:Lista_errores.push("<tr><td>lexico</td><td>No se reconoce el caracter "+yy_.yytext + '</td><td>' + (yy_.yylineno+1) +'</td><td>'+(yy_.yylloc.first_column+1)+'</td></tr>');	
break;
}
},
rules: [/^(?:["])/i,/^(?:[^"\\])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:([\'][^']*[\']))/i,/^(?:([\`][^`]*[\`]))/i,/^(?:\*\*)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:const\b)/i,/^(?:number\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:let\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:function\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true},"INITIAL":{"rules":[0,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}